# -*- coding: utf-8 -*-
"""inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PIS6XLrH3ho52pKCX1bvFXPrHbLOhbFE
"""

!git clone https://github.com/facebookresearch/detectron2.git

from google.colab import drive
drive.mount('/content/gdrive')
!pip install -U torch==1.5 torchvision==0.6 -f https://download.pytorch.org/whl/cu101/torch_stable.html 
!pip install cython pyyaml==5.1
!pip install -U 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'
!pip install detectron2==0.1.3 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.5/index.html
from detectron2.data.datasets import register_coco_instances
try: 
  register_coco_instances("my_dataset_test", {}, "/content/gdrive/MyDrive/training_data/test/_annotations.coco.json", "/content/test")
except:
  pass
import cv2
import os
import glob
import random
import time
import detectron2
from tqdm import tqdm
import numpy as np
import pandas as pd
import torch, torchvision
from detectron2 import model_zoo
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.config import get_cfg
from detectron2.engine import DefaultTrainer
from detectron2.evaluation import COCOEvaluator
from detectron2.data import DatasetCatalog, MetadataCatalog, build_detection_test_loader
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
my_dataset_train_metadata = MetadataCatalog.get("my_dataset_train")
from detectron2.utils.visualizer import Visualizer
class CocoTrainer(DefaultTrainer):

  @classmethod
  def build_evaluator(cls, cfg, dataset_name, output_folder=None):

    if output_folder is None:
        os.makedirs("coco_eval", exist_ok=True)
        output_folder = "coco_eval"


    return COCOEvaluator(dataset_name, cfg, False, output_folder)
  
def inference(Input_dir, output_dir, image_format = "tif", IS_FASTER_RCNN = True,IS_GRAY_SCALE=False,threshold=0.5, NMS=0.1):
  cfg = get_cfg()
  if IS_FASTER_RCNN:
    cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_X_101_32x8d_FPN_3x.yaml"))
    cfg.OUTPUT_DIR = "/content/gdrive/MyDrive/faster_rcnn_weights_new_images"  
  else: 
    cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/retinanet_R_101_FPN_3x.yaml"))
    cfg.OUTPUT_DIR="/content/gdrive/MyDrive/retinanet_weights_new_images"

  cfg.MODEL.NMS_THRESH_TEST = NMS
  cfg.MODEL.RETINANET.NMS_THRESH_TEST = NMS
  cfg.MODEL.RETINANET.SCORE_THRESH_TEST = threshold
  cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")  # Let training initialize from model zoo
  cfg.MODEL.ROI_HEADS.NUM_CLASSES = 2 
  cfg.MODEL.RETINANET.NUM_CLASSES = 2
  cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
  cfg.DATASETS.TEST = ("my_dataset_test", )
  cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = threshold   # set the testing threshold for this model
  predictor = DefaultPredictor(cfg)
  test_metadata = MetadataCatalog.get("my_dataset_test")
  df = pd.DataFrame(columns=('Image_Name', 'Counts'))
  image_name=[]
  counts=[]
  num=0
  start_time = time. time()
  input_path = Input_dir + "*" + Image_format
  output_path = output_dir
  for imageName in tqdm(glob.glob(input_path)):
    num+=1
    im = cv2.imread(imageName) 
    name = imageName.split('/')[-1]
    print(name)
    save_path =  output_path + imageName.split('/')[-1]
    
    imgheight, imgwidth =im.shape[0],im.shape[1]
    s=0
    if imgheight > 800:
      blank_image = np.zeros((imgheight,imgwidth,3), np.uint8)
      height= int(imgheight//2)
      width= int(imgwidth//2)
      
      for i in range(0,imgheight,height):
        for j in range(0,imgwidth,width):
          
          box = (j, i, j+width, i+height)
          a = im[i:i+height,j:j+width]
          newsize=(width,height)
          outputs = predictor(a)
          v = Visualizer(a[:, :, ::-1],
                    metadata=test_metadata, 
                    scale=0.8
                    )
          for box in outputs["instances"].pred_boxes.to('cpu'):
            v.draw_box(box)
            
          v = v.get_output()
          # out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
          s += len(outputs['instances'])
          blank_image[i:i+height,j:j+width]=cv2.resize(v.get_image()[:, :, ::-1], newsize, interpolation = cv2.INTER_AREA)
        
    else:
          blank_image = np.zeros((imgheight,imgwidth,3), np.uint8)
          a = cv2.resize(im, (896,896), interpolation = cv2.INTER_AREA)
          outputs = predictor(a)
          v = Visualizer(a[:, :, ::-1],
                    metadata=test_metadata, 
                    scale=0.8
                    )
          out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
          s += len(outputs['instances'])
          blank_image = cv2.resize(out.get_image()[:, :, ::-1], (600,600), interpolation = cv2.INTER_AREA)
    
    image_name.append(name)
    counts.append(s) 
    cv2.imwrite(save_path,blank_image)
  current_time = time. time()
  elapsed_time = current_time - start_time
  print("Time taken: ", elapsed_time)
    
  df['Image_Name'] = image_name
  df['Counts']=counts
  excel_path = output_dir + "Microglia_count.xlsx"
  df.to_excel(excel_path)

IS_FASTER_RCNN = False # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/EDF/"
output_dir = "/content/gdrive/MyDrive/EDF_DETECTED_RETINANET/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

IS_FASTER_RCNN = False # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/papers_2/avg_stack/"
output_dir = "/content/gdrive/MyDrive/papers_2/avg_stack_RetinaNet/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

IS_FASTER_RCNN = True # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/papers_2/LPS Model/"
output_dir = "/content/gdrive/MyDrive/papers_2/LPS Model_Detected_Faster_RCNN/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

IS_FASTER_RCNN = False # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/papers_2/LPS Model/"
output_dir = "/content/gdrive/MyDrive/papers_2/LPS Model_Detected_RetinaNet/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

IS_FASTER_RCNN = True # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/papers_2/PD Model/"
output_dir = "/content/gdrive/MyDrive/papers_2/PD Model_Detected_Faster_RCNN/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

IS_FASTER_RCNN = False # True for Faster-RCNN, False for Retina-Net 
IS_GRAY_SCALE = False
Probability_threshold = 0.5
NMS_threshold = 0.1
Image_format = "tif" # supports: "tif", "png" and "jpg"
Input_image_dir = "/content/gdrive/MyDrive/papers_2/PD Model/"
output_dir = "/content/gdrive/MyDrive/papers_2/PD Model_Detected_RetinaNet/"
inference(Input_image_dir, output_dir, image_format = Image_format, IS_FASTER_RCNN = IS_FASTER_RCNN ,IS_GRAY_SCALE = IS_GRAY_SCALE, threshold = Probability_threshold, NMS = NMS_threshold)

